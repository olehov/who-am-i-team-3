openapi: 3.0.3
info:
  version: 1.0.0
  title: Who am I?
  description: Rest Api description
servers:
  - url: http://localhost:8080/api/v1
paths:
  /games:
    get:
      tags:
        - game
      description: Return a list available games
      operationId: findAvailableGames
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string               
      responses:
        '200':
          description: Return a list of available games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameLight'
  /games/info:
    get:
      tags:
        -game
      description: Return a list all games
      operationId: findAllGamesInfo
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return a list of all games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllFields'
  /games/create:
    post:
      tags:
        - game
      description: Create game
      operationId: createGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string  
      requestBody:
        description: Model for game creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        '201':
          description: Return details about created game
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}:
    get:
      tags:
        - game
      description: Return data about game by game id
      operationId: findById
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}/players:
    post:
      tags:
        - game
      description: Enroll (add) user to game
      operationId: enrollToGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return enrolled player
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SynchronousPlayer'
  /games/{id}/characters:
    post:
      tags:
        - game
      description: Suggest character
      operationId: suggestCharacter
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Model for character suggestions
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CharacterSuggestion'
      responses:
        '200':
          description: No response data in case successful request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PlayerSuggestion'
  /games/{id}/turn:
    get:
      tags:
        - game
      description: Return data about current turn
      operationId: findTurnInfo
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/TurnDetails'
  /games/{id}/start:
    post:
      tags:
        - game
      description: Start game
      operationId: startGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return details about start game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/StartGameModel'
  /games/{id}/questions:
    post:
      tags:
        - game
      description: Ask question
      operationId: askQuestion
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Question model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/guess:
    post:
      tags:
        - game
      description: Take guess
      operationId: submitGuess
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Question model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/answer/guess:
    post:
      tags:
        - game
      description: answer guess question
      operationId: answerGuess
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Question answer model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAnswer'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/answer:
    post:
      tags:
        - game
      description: Give answer
      operationId: answerQuestion
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Question answer model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAnswer'
      responses:
        '200':
          description: No response data in case succesful request
  /games/quick:
    post:
      tags:
        - game
      description: Create or find quick game
      operationId: findQuickGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model for quick game creation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/QuickGame'
  /games/{id}/leave:
    delete:
      tags:
        - game
      description: Leave game
      operationId: leaveGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model for leave game
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LeaveModel'
  /games/all-players-count:
    get:
      tags:
        - game
      description: Check all players online
      operationId: playersOnlineInfo
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model for check players online
          content:
            application/json:
              schema:
                type: integer
  /games/{id}/players-in-game:
    get:
      tags:
        - game
      description: Check players in game
      operationId: playersInGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Model for check players in game
          content:
            application/json:
              schema:
                type: integer
        #  ----- Components  ----------------------------------------
components:                 
  schemas:
    GameLight:
      type: object
      properties:
        id:
          type: string
        status:
            type: string
        playersInGame:
            type: string
    NewGameRequest:
      type: object
      properties:
        maxPlayers:
          type: integer
    GameDetails:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        playersInGame:
          type: string
    PlayerWithState:
      type: object
      properties:
        player:
          type: object
          $ref: '#/components/schemas/SynchronousPlayer'
        answer:
          type: object
          $ref: '#/components/schemas/QuestionAnswer'
    SynchronousPlayer:
      type: object
      properties:
        userName:
          type: string
        nickName:
          type: string
        characterSuggestion:
          type: string
        playerState:
          type: string
        isSuggested:
          type: boolean
        gameCharacter:
          type: string
        isCharacterAssigned:
          type: boolean
    CharacterSuggestion:
      type: object
      properties:
        nickname:
          type: string
        character:
          type: string
    TurnDetails:
      type: object
      properties:
        currentPlayer:
          type: object
          $ref: '#/components/schemas/SynchronousPlayer'
        question:
          type: object
          $ref: '#components/schemas/Question'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerWithState'
    Question:
      type: object
      properties:
        question:
          type: string
    Message:
      type: object
      properties:
        message:
          type: string
    PlayerSuggestion:
      type: object
      properties:
        username:
          type: string
        nickname:
          type: string
        suggestion:
          type: string
    AllFields:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        accessibility:
          type: boolean
        playersInGame:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/BasePlayerModel'
    BasePlayerModel:
      type: object
      properties:
        username:
          type: string
        nickname:
          type: string
        gameCharacter:
          type: string
        characterSuggestion:
          type: string
        isSuggested:
          type: boolean
        isCharacterAssigned:
          type: boolean
    StartGameModel:
      type: object
      properties:
        gameId:
          type: string
        gameState:
          type: string
        playersInGame:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/BasePlayerModel'
    QuickGame:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        accessibility:
          type: boolean
        playersInGame:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/BasePlayerModel'
    LeaveModel:
      type: object
      properties:
        username:
          type: string
        gameId:
          type: string
#  ---- Enums section  ----------------------------------------            
    QuestionAnswer:
      type: string
      enum:
        - YES
        - NO
        - NOT_SURE
    PlayerState:
      type: string
      enum:
        - NOT_READY
        - READY
        - ASKING
        - ANSWERING
        - FINISHED
        - CHARACTER_SUGGESTION
        - WAITING_ANSWERS
        - ANSWERED