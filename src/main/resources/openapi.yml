openapi: 3.0.3
info:
  version: 1.0.0
  title: Who am I?
  description: Rest Api description
servers:
  - url: http://localhost:8090/api/v1
paths:
  /games:
    get:
      tags:
        - game
      description: Returns a list available games
      operationId: findAvailableGames
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of available games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersistentGame'
    post:
      tags:
        - game
      description: Creates game
      operationId: createGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
      requestBody:
        description: Model for game creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        '201':
          description: Returns details about created game
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}:
    get:
      tags:
        - game
      description: Returns data about game by game id
      operationId: findById
      parameters:
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
    post:
      tags:
        - game
      description: Start game
      operationId: startGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}/players:
    post:
      tags:
        - game
      description: Enrolls(adds) user to game
      operationId: enrollToGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns enrolled player
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PlayerDetails'
  /games/{id}/characters:
    post:
      tags:
        - game
      description: Suggest character
      operationId: suggestCharacter
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Model for character suggestions
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterSuggestion'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/turn:
    get:
      tags:
        - game
      description: Returns data about current turn
      operationId: findTurnInfo
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/TurnDetails'
  /games/{id}/questions:
    post:
      tags:
        - game
      description: Ask question
      operationId: askQuestion
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Message model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/guess:
    post:
      tags:
        - game
      description: Take guess
      operationId: submitGuess
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Message model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: No response data in case successful request
  /games/{id}/answer:
    post:
      tags:
        - game
      description: Give answer
      operationId: answerQuestion
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
        - in: query
          name: answer
          required: true
          description: QuestionAnswer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionAnswer'
      responses:
        '200':
          description: No response data in case successfully request
  /games/{id}/guess/answer:
    post:
      tags:
        - game
      description: Answer the guess
      operationId: answerGuessingQuestion
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
        - in: query
          name: answer
          description: QuestionAnswer
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionAnswer'
      responses:
        '200':
          description: No response data in case successfully request
  /games/{id}/history:
    get:
      tags:
        - game
      description: Returns data about history
      operationId: getGameHistory
      parameters:
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about history
          content:
            application/json:
              schema:
                type: string
  /games/{id}/leave:
    delete:
      tags:
        - game
      description: Removes the player from the game
      operationId: leaveGame
      parameters:
        - in: header
          name: X-Player
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response data in case successfully request

#  ----- Components  ----------------------------------------           
components:
  schemas:
    NewGameRequest:
      type: object
      properties:
        maxPlayers:
          type: integer
    PersistentGame:
      type: object
      properties:
        id:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
        maxPlayer:
          type: integer
        gameStatus:
          type: object
          $ref: '#/components/schemas/GameStatus'
        winners:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
        turn:
          type: object
          $ref: '#/components/schemas/Turn'
        history:
          type: object
          $ref: '#/components/schemas/HistoryChat'
    Turn:
      type: object
      properties:
        getCurrentGuesser:
          type: object
          $ref: '#/components/schemas/PersistentPlayer'
        getOtherPlayers:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
        getPlayersAnswers:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnswer'
        changeTurn:
          type: object
          $ref: '#/components/schemas/Turn'
        removePlayer:
          type: string
        getAllPlayers:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
    HistoryChat:
      type: object
      properties:
        questions:
          type: array
          items:
            type: string
        answer:
          type: array
          items:
            type: string
    GameDetails:
      type: object
      properties:
        id:
          type: string
        status:
          type: object
          $ref: '#/components/schemas/GameStatus'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
        winners:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
    PersistentPlayer:
      type: object
      properties:
        id:
          type: string
        gameId:
          type: string
        nickname:
          type: string
        character:
          type: string
        suggestStatus:
          type: boolean
        playerState:
          type: object
          $ref: '#/components/schemas/PlayerState'
        enteredAnswer:
          type: boolean
        enteredQuestion:
          type: boolean
        guessing:
          type: boolean
        playerQuestion:
          type: string
        playerAnswer:
          type: string
    CharacterSuggestion:
      type: object
      properties:
        character:
          type: string
    TurnDetails:
      type: object
      properties:
        currentPlayer:
          type: object
          $ref: '#/components/schemas/PersistentPlayer'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PersistentPlayer'
    Message:
      type: object
      properties:
        message:
          type: string
    PlayerDetails:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string

      #  ---- Enums section  ----------------------------------------
    QuestionAnswer:
      type: string
      enum:
        - "YES"
        - "NO"
        - "NOT_SURE"
    PlayerState:
      type: string
      enum:
        - GUESSING
        - ANSWER_QUESTION
        - ASK_QUESTION
        - WAITING_FOR_ANSWER
        - GAME_WINNER
        - GAME_LOOSER
    GameStatus:
      type: string
      enum:
        - WAITING_FOR_PLAYERS
        - SUGGEST_CHARACTER
        - READY_TO_PLAY
        - GAME_IN_PROGRESS
